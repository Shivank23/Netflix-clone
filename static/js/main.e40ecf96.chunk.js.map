{"version":3,"sources":["axios.js","request.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","get","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovie","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e40ecf96.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL: \"http://api.themoviedb.org/3\",\r\n});\r\ninstance.get('/foo-bar')\r\nexport default instance;","const API_KEY = \"95d19ab4ca9abcdb4c7bdc9413b6eb9a\";\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&langauge=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&langauge=en-US`,\r\n    fetchActionMovie: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios'\r\nimport requests from './request';\r\nimport movieTrailer from 'movie-trailer';\r\nimport './Row.css'\r\nimport Youtube from 'react-youtube';\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    //we need snippet of code whicj runs base on a specific condition/vriable\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request\r\n        }\r\n        fetchData()\r\n\r\n    }, [fetchUrl]);\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n\r\n        }\r\n    };\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\").then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'))\r\n\r\n            }).catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {/* several row poster*/}\r\n                {movies.map(movie => (\r\n                    <img\r\n\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from './request';\r\nimport \"./Banner.css\";\r\n\r\n\r\n\r\nfunction Banner() {\r\n    const [movie, setMovies] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovies(\r\n                request.data.results\r\n                [Math.floor(Math.random() * request.data.results.length - 1)])\r\n\r\n            return request;\r\n        }\r\n        fetchData()\r\n\r\n\r\n    }, [])\r\n    console.log(movie)\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n    return (\r\n        <header className='banner'\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(http://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n                backgroundPosition: \"center center\",\r\n            }}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div >\r\n                    <button className=\"banner_buttons\">Play</button>\r\n                    <button className=\"banner_buttons\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"></div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false)\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\")\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\"\r\n                src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" />\r\n            <img className=\"nav_avtar\"\r\n                src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" />\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Nav","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './request';\nimport Banner from \"./Banner\";\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/*navbar*/}\n      {/*BANNER*/}\n      <Nav />\n      <Banner />\n\n      <Row title=\"NETFLIX ORIGINAL\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovie} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horrer Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}